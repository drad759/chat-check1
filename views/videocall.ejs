<!DOCTYPE html>
<html lang="en" dir="ltr">
<head>
    <meta charset="utf-8" />
    <title>Video App</title>
    <style>
      * { margin: 0; padding: 0; box-sizing: border-box; }
html, body { height: 100%; }
body { font-family: Arial, sans-serif; }

#videoContainer {
    display: flex;
    flex-direction: column;
    height: 100%;
}

#mainVideoContainer {
    flex: 1;
    display: flex;
    justify-content: center;
    align-items: center;
    background: #000;
}

#mainVideo {
    width: 80vw;
    height: 80vh;
    object-fit: cover;
    border: 2px solid white;
}

#videoDiv {
    display: grid;
    grid-gap: 10px;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    padding: 10px;
    overflow: auto;
    background: #000;
}

video.secondary {
    width: 100%;
    height: auto;
    max-height: 150px; /* Increase the size of smaller videos */
    object-fit: cover;
    border: 2px solid white;
}

#controls {
    display: flex;
    justify-content: center;
    padding: 10px;
    background: rgba(0, 0, 0, 0.7);
}

button {
    height: 40px;
    width: 100px;
    margin: 0 10px;
    text-align: center;
    border-radius: 10px;
    outline: none;
    border: none;
    background-color: #ff4d4d;
    color: white;
    cursor: pointer;
    font-size: 16px;
}

    </style>
    <script src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js" defer></script>
    <script src="/socket.io/socket.io.js" defer></script>
    <script>
    document.addEventListener('DOMContentLoaded', () => {
    let roomID = '<%= RoomId %>';

    if (!roomID) {
        roomID = prompt('Enter room ID:');
        if (!roomID) {
            alert('Room ID is required');
            return;
        }
    }

    const socket = io('/');
    const peer = new Peer();
    let myVideoStream;
    let myId;
    const mainVideo = document.getElementById('mainVideo');
    const videoGrid = document.getElementById('videoDiv');
    const peerConnections = {};

    function addVideo(video, stream, isMain = false) {
        video.srcObject = stream;
        video.addEventListener('loadedmetadata', () => {
            video.play();
        });

        if (isMain) {
            mainVideo.srcObject = stream;
            mainVideo.classList.remove('secondary');
        } else {
            video.classList.add('secondary');
            videoGrid.append(video);
        }
    }

    function switchVideo(video) {
        // Set the new video as main
        mainVideo.srcObject = video.srcObject;
        mainVideo.classList.remove('secondary');
        
        // Remove 'active' class from previous video
        const currentMainVideo = document.querySelector('#videoDiv video.active');
        if (currentMainVideo) {
            currentMainVideo.classList.remove('active');
            videoGrid.removeChild(currentMainVideo); // Remove from grid
        }

        // Add 'active' class to new main video
        video.classList.add('active');
        videoGrid.append(video); // Ensure it is visible in the grid
    }

    navigator.mediaDevices.getUserMedia({ video: true, audio: true })
        .then(stream => {
            myVideoStream = stream;
            addVideo(mainVideo, stream, true);

            peer.on('call', call => {
                call.answer(stream);
                const incomingVideo = document.createElement('video');
                incomingVideo.classList.add('secondary');
                incomingVideo.addEventListener('click', () => switchVideo(incomingVideo));
                call.on('stream', userStream => {
                    addVideo(incomingVideo, userStream);
                });
                call.on('error', err => {
                    console.error('Call error:', err);
                    alert('Call error: ' + err.message);
                });
                call.on('close', () => {
                    incomingVideo.remove();
                });
                peerConnections[call.peer] = call;
            });
        })
        .catch(err => {
            console.error('Media error:', err);
            alert('Media error: ' + err.message);
        });

    peer.on('open', id => {
        myId = id;
        socket.emit('newUser', id, roomID);
    });

    peer.on('error', err => {
        console.error('Peer error:', err);
        alert('Peer error: ' + err.message);
    });

    socket.on('userJoined', id => {
        console.log("New user joined: " + id);
        const call = peer.call(id, myVideoStream);
        const incomingVideo = document.createElement('video');
        incomingVideo.classList.add('secondary');
        incomingVideo.addEventListener('click', () => switchVideo(incomingVideo));
        call.on('error', err => {
            console.error('Call error:', err);
            alert('Call error: ' + err.message);
        });
        call.on('stream', userStream => {
            addVideo(incomingVideo, userStream);
        });
        call.on('close', () => {
            incomingVideo.remove();
            console.log("User disconnected: " + id);
        });
        peerConnections[id] = call;
    });

    socket.on('userDisconnect', id => {
        if (peerConnections[id]) {
            peerConnections[id].close();
        }
    });

    document.getElementById('controls').addEventListener('click', (event) => {
        if (event.target.id === 'mute') {
            myVideoStream.getAudioTracks().forEach(track => track.enabled = !track.enabled);
            event.target.textContent = myVideoStream.getAudioTracks()[0].enabled ? 'Mute' : 'Unmute';
        } else if (event.target.id === 'endCall') {
            Object.values(peerConnections).forEach(call => call.close());
            peerConnections = {};
        }
    });
});


    </script>
</head>
<body>
    <div id="videoContainer">
        <div id="mainVideoContainer">
            <video id="mainVideo" autoplay muted playsinline></video>
        </div>
        <div id="videoDiv"></div>
        <div id="controls">
            <button id="mute">Mute</button>
            <button id="endCall">End Call</button>
        </div>
    </div>
</body>
</html>
