<!DOCTYPE html>
<html lang="en" dir="ltr">
<head>
    <meta charset="utf-8" />
    <title>Video App</title>
    <style>
        * { margin: 0; }
        #videoDiv {
            display: grid;
            grid-gap: 10px;
            height: 80%;
            position: relative;
            grid-template-columns: repeat(auto-fill, 300px);
            grid-auto-rows: 300px;
        }
        #footer {
            width: 100%;
            height: 50px;
            background-color: white;
            display: flex;
            justify-content: center;
            flex: 1;
            border-bottom: 1px solid grey;
            margin-top: 10px;
        }
        button {
            height: 30px;
            width: 80px;
            margin-top: 10px;
            text-align: center;
            border-radius: 10px;
            outline: none;
            border: none;
            background-color: red;
            cursor: pointer;
        }
        video {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border: 2px solid white;
        }
    </style>
    <script src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js" defer></script>
    <script src="/socket.io/socket.io.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const roomID = prompt('Enter room ID:');
            if (!roomID) {
                alert('Room ID is required');
                return;
            }

            const socket = io('/');
            const peer = new Peer();
            let myVideoStream;
            let myId;
            const videoGrid = document.getElementById('videoDiv');
            const myvideo = document.createElement('video');
            myvideo.muted = true;
            const peerConnections = {};

            function addVideo(video, stream) {
                video.srcObject = stream;
                video.addEventListener('loadedmetadata', () => {
                    video.play();
                });
                videoGrid.append(video);
            }

            navigator.mediaDevices.getUserMedia({ video: true, audio: true })
                .then(stream => {
                    myVideoStream = stream;
                    addVideo(myvideo, stream);

                    peer.on('call', call => {
                        call.answer(stream);
                        const vid = document.createElement('video');
                        call.on('stream', userStream => {
                            addVideo(vid, userStream);
                        });
                        call.on('error', err => {
                            console.error('Call error:', err);
                            alert('Call error: ' + err.message);
                        });
                        call.on('close', () => {
                            console.log('Call closed');
                            vid.remove();
                        });
                        peerConnections[call.peer] = call;
                    });
                })
                .catch(err => {
                    console.error('Media error:', err);
                    alert('Media error: ' + err.message);
                });

            peer.on('open', id => {
                myId = id;
                socket.emit('newUser', id, roomID);
            });

            peer.on('error', err => {
                console.error('Peer error:', err);
                alert('Peer error: ' + err.message);
            });

            socket.on('userJoined', id => {
                console.log("New user joined: " + id);
                const call = peer.call(id, myVideoStream);
                const vid = document.createElement('video');
                call.on('error', err => {
                    console.error('Call error:', err);
                    alert('Call error: ' + err.message);
                });
                call.on('stream', userStream => {
                    addVideo(vid, userStream);
                });
                call.on('close', () => {
                    vid.remove();
                    console.log("User disconnected: " + id);
                });
                peerConnections[id] = call;
            });

            socket.on('userDisconnect', id => {
                if (peerConnections[id]) {
                    peerConnections[id].close();
                }
            });
        });
    </script>
</head>
<body>
    <div id="videoDiv"></div>
</body>
</html>
